//using Common.Logging;
using log4net.Config;
using Quartz;
using Quartz.Impl;
using Quartz.Impl.Triggers;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;
using log4net;
using log4net.Repository.Hierarchy;
using log4net.Appender;
//using log4net.Config;

namespace SOSIntegrator
{
    public partial class Service1 : ServiceBase
    {
        private const string Group1 = "BusinessTasks";
        private const string Job = "Job";
        private static readonly ILog Log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
       
        private static IScheduler _scheduler;
        
        public Service1()
        {
            InitializeComponent();
            
        }

        public static string LoggerFile()
        {
            var rootAppender = ((Hierarchy)LogManager.GetRepository())
                                             .Root.Appenders.OfType<FileAppender>()
                                             .FirstOrDefault();
            string filename = rootAppender != null ? rootAppender.File : string.Empty;

            return filename;

        }
        public void OnDebug()
        {
            OnStart(null);
        }

        protected override void OnStart(string[] args)
        {
            XmlConfigurator.Configure();

            ISchedulerFactory schedulerFactory = new StdSchedulerFactory();
            _scheduler = schedulerFactory.GetScheduler();
            _scheduler.Start();

            Log.Info("Starting Windows Service: " );
            AddJobs();
            }

        private void AddJobs()
        {
            AddHealthMonitoringJob();
            AddRegistrationsToSOS();
       
        }

        public static void AddHealthMonitoringJob()
        {
            const string trigger1 = "HealthMonitoring";

            IDoJob myJob = new HealthMonitiorJob();
            var jobDetail = new JobDetailImpl(trigger1 + Job, Group1, myJob.GetType());
            var trigger = new CronTriggerImpl(
                trigger1,
                Group1,
                "0 0/10 * * * ?" /* every 10 minutes */
                ) { TimeZone = TimeZoneInfo.Utc };
            _scheduler.ScheduleJob(jobDetail, trigger);
            var nextFireTime = trigger.GetNextFireTimeUtc();
            if (nextFireTime != null)
                Log.Info(Group1 + "+" + trigger1, new Exception(nextFireTime.Value.ToString("u")));
        }

        public class HealthMonitiorJob : IDoJob
        {
            public void Execute(IJobExecutionContext context)
            {
                Log.Info(DateTime.UtcNow);
            }
        }

        private void AddRegistrationsToSOS()
        {
            const string trigger1 = "ExportTasksTrigger";
            const string jobName = trigger1 + Job;
            IDoJob myJob = new RegistrationsToSOS();
            var jobDetail = new JobDetailImpl(jobName, Group1, myJob.GetType());
            var trigger = new CronTriggerImpl(
                trigger1,
                Group1,
                "0 0/1 * * * ?"  /* run every day at 2:00 UTC */ ) { TimeZone = TimeZoneInfo.Utc };
            _scheduler.ScheduleJob(jobDetail, trigger);
            var nextFireTime = trigger.GetNextFireTimeUtc();
            if (nextFireTime != null)
                Log.Debug(Group1 + "+" + trigger1, new Exception(nextFireTime.Value.ToString("u")));  
        }

        internal class RegistrationsToSOS : IDoJob
        {
            private NordCar.Carla.Data.Implementation.ECAPIManagerRepository ecr;
            private NordCar.Carla.Data.Entities.BasicStructure basic;
         
            public RegistrationsToSOS()
            {
                basic = new NordCar.Carla.Data.Entities.BasicStructure()
                     {
                         BookTypes = NordCar.Carla.Data.Entities.BookTypes.SOS
                     };

                ecr = new NordCar.Carla.Data.Implementation.ECAPIManagerRepository("192.168.16.98", 1074, LoggerFile());
            }

            public void ProcessRegistrations()
            {
                try
                {
                    basic.FunctionId = NordCar.Carla.Data.Entities.FunctionList.GetReservationStatusQueue;
                    var res = ecr.GetReservationStatusQueue(basic, "826164");
                    if (res.Item1.Succes)
                    {
                        var resitems = res.Item2;

                        foreach (var item in resitems)
                        {
                            Log.Info(string.Format("Message ID = {0}",item.MessageId));
                            if (item.ReservationNumber != "")
                            {
                                //RA
                            }
                            else
                            { 
                                //RES
                            }
                            DeleteMessage(basic,item);
                        
                        }
                    }
                    else
                    {
                        Log.Error(string.Format("Fejl {0}-{1}-{2}-{3} ", res.Item1.MessageId, res.Item1.Message, res.Item1.ErrorCode, res.Item1.ErrorMessage));
                    
                    }
                    Log.Info("Sent : " + "res 1");
           
                }
                catch (Exception ex)
                {
                    Log.Error("ProcessRegistrations:" + ex);
                }
                
            }

            private void DeleteMessage(NordCar.Carla.Data.Entities.BasicStructure basic,NordCar.Carla.Data.Entities.EC.QueueInfo item)
            {
                try
                {
                    basic.FunctionId = NordCar.Carla.Data.Entities.FunctionList.ReservationStatusQueueMessageProcessed;
                    var result = ecr.ReservationStatusQueueMessageProcessed(basic, item.MessageId);
                    Log.Info(string.Format("Deleted {0}", result.Item2));

                }
                catch (Exception ex)
                {
                    Log.Error(string.Format("Exception {0}", ex.ToString()));
                }
            }

            public void Execute(IJobExecutionContext context)
            {
                ProcessRegistrations();
            }
        }
        protected override void OnStop()
        {
            Log.Info("Stopping Windows Service: ");
        }

        internal interface IDoJob : IJob
        {

        }
    }
}
