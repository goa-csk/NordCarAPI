using System;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NordCar.Carla.Data.Entities;
using System.Net;
using System.Net.Sockets;
using NordCar.Carla.Data.Entities.CustomerPrivate;
using NordCar.Carla.Data.Implementation;
using NordCar.Carla.Data.Repository;

namespace NordCar.Carla.Data.Test.Cris
{
    [TestClass]
    public class TestCustomerCompany
    {
        private const string ip = "192.168.16.98";
        private const int port = 1074;
        private const string logfile = @"";
        private ECAPIManagerRepository ccm = null;


        private static BasicStructure fillbasics(string booktypes)
        {
            return new BasicStructure() { Language = LanguageList.DA, BookTypes = booktypes, IPAddress = ip, CompanyDealId = "", CustomerId = "", ExtraId = "", VoucherCode = "", OrgBookNr = "", StepNr = "" };
        }

        [TestInitialize]
        public void Initialize()
        {
            ccm = new ECAPIManagerRepository(ip, port, logfile);
        }


        [TestMethod]
        [TestCategory("Carla")]
        public void HelloWorld()
        {
            var x = ccm.GetVersion(fillbasics("ECBOOK"));
            Assert.IsNotNull(x);
        }

        [TestMethod]
        [TestCategory("Carla")]
        public void GetCustomerCompanyNumbers_no_date_Test()
        {
            //Should return all customers
            var x = ccm.GetCustomerCompanyNumbers(fillbasics("ECBOOK"),null);
            string name = x.Item2.Where(c => c.CustomerCompanyNumber == "10194").FirstOrDefault().CompanyName;
            Assert.AreEqual(name,"DR");
        }

        [TestMethod]
        [TestCategory("Carla")]
        public void GetCustomerCompany()
        {
            //Should return all customers
            var x = ccm.GetCustomerCompany(fillbasics("ECBOOK"),"10012");
            string name = x.Item2.CompanyName;
            Assert.AreEqual(name, "ARLA FOODS");
        }

        [TestMethod]
        [TestCategory("Carla")]
        public void CreateCustomerCompanyTest()
        {
            var x = ccm.CreateCustomerCompany(fillbasics("ECBOOK"), CustomerCompanyTestFactory.ECCreateCustomer());
            Assert.IsNotNull(x);
        }
    }
}
