using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using NordCar.Carla.Data.EF.Repository;
using SOSService.BootStrapper;
using AutoMapper;
using NordCar.Carla.Data.Repository;
using Nordcar.Contract.Service.Exception;
using SOSService.Data;
using System.ServiceModel;
using log4net;
using UnityLog4NetExtension.CreationStackReporter;

namespace SOSService
{
   /// <summary>
   /// SOS intergration
   /// </summary>
    public class SOSService : ISOSService
    {
        private readonly ILog log;
        private const string SOSVersionString = "v0.0";
        private const int customerNo = 826164;
        private static DateTime _serverBuildTime = DateTime.MinValue;
        private ICustomerAgreement custAgreement;
        private IECAPIManagerRepository ecAPIManager;

        public SOSService(ICustomerAgreement customerAgreement, IECAPIManagerRepository ecAPIManagerRepository, ILog logger)
        {
            this.custAgreement = customerAgreement;
            this.ecAPIManager = ecAPIManagerRepository;
            log = logger;

            var bs = new Bootstrapper();
            bs.Initialize();
        }

        /// <summary>
        /// Get version information.
        /// </summary>
        /// <returns>Get version as string</returns>
        public string Version()
        {
            log.Info("Version called");
            return string.Format("{2} ({0}, {1})", Environment.MachineName, ServerBuildTime, SOSVersionString);
        }

        /// <summary>
        /// Get a list of SOS Agreements in the Carla system
        /// </summary>
        /// <returns></returns>
        public IEnumerable<Agreement> GetAgreements()
        {
            log.Info("GetAgreements called");
            var data = custAgreement.GetCustomerAgreement(customerNo);
            return Mapper.Map<List<NordCar.Carla.Data.EF.Entities.customerAgreement>, List<Agreement>>(data);
        }

        /// <summary>
        /// Get a list of SOS avaiable stations in the Carla system
        /// </summary>
        /// <returns></returns>
        public IEnumerable<Location> GetStations()
        {
            try
            {
                var bs = new NordCar.Carla.Data.Entities.BasicStructure() { BookTypes = NordCar.Carla.Data.Entities.BookTypes.SOS, CustomerId = customerNo.ToString(), FunctionId = NordCar.Carla.Data.Entities.FunctionList.GetLocations };

                var data = ecAPIManager.GetLocations(bs);

                if (!data.Item1.Succes)
                {
                    throw new FaultException<ECConfigurationFault>(new ECConfigurationFault("GetStations"), data.Item1.ErrorMessage);
                }


                return Mapper.Map<List<NordCar.Carla.Data.Entities.EC.Location>, List<Location>>(data.Item2);
            }
            catch (FaultException<ConfigurationFault> ex)
            {
                log.Warn(ex.Reason);
                throw new FaultException<ECConfigurationFault>(new ECConfigurationFault("GetStations"), ex.Reason);
            }
            catch (FaultException ex)
            {
                if (!(ex is FaultException<ECValidationFault>))
                    log.Warn(ex.Reason);
                throw ex;
            }
            catch (System.Exception ex)
            {
                log.Error(ex.Message, ex);
                throw new FaultException(ex.Message);
            }
           
        }

        /// <summary>
        /// Get station details
        /// </summary>
        /// <param name="stationNo">Station number</param>
        /// <returns></returns>
        public LocationDetail GetStationDetails(int stationNo)
        {
            try
            {
                var bs = new NordCar.Carla.Data.Entities.BasicStructure() { BookTypes = NordCar.Carla.Data.Entities.BookTypes.SOS, CustomerId = customerNo.ToString(), FunctionId = NordCar.Carla.Data.Entities.FunctionList.GetLocationDetails };

                var data = ecAPIManager.GetLocationDetails(bs, stationNo.ToString(), DateTime.Now, 120);

                if (!data.Item1.Succes)
                {

                    throw new FaultException<ECConfigurationFault>(new ECConfigurationFault("GetStationDetails"), data.Item1.ErrorMessage);

                }

                return Mapper.Map<NordCar.Carla.Data.Entities.EC.LocationDetail, LocationDetail>(data.Item2);


            }
            catch (FaultException<ConfigurationFault> ex)
            {
                log.Warn(ex.Reason);
                throw new FaultException<ECConfigurationFault>(new ECConfigurationFault("GetStationDetails"), ex.Reason);
            }
            catch (FaultException ex)
            {
                if (!(ex is FaultException<ECValidationFault>))
                    log.Warn(ex.Reason);
                throw ex;
            }
            catch (System.Exception ex)
            {
                log.Error(ex.Message, ex);
                throw new FaultException(ex.Message);
            }


        }

        /// <summary>
        /// Make a reservation in the Carla system
        /// </summary>
        /// <param name="reservation"></param>
        public void MakeReservation(Reservation reservation)
        {
            try
            {

                var bs = new NordCar.Carla.Data.Entities.BasicStructure() { BookTypes = NordCar.Carla.Data.Entities.BookTypes.SOS, CustomerId = customerNo.ToString(), FunctionId = NordCar.Carla.Data.Entities.FunctionList.MakeReservation,  };

                //New Reservation
                var newRes = new NordCar.Carla.Data.Entities.EC.Reservation()
                {
                    Gender = "",
                    FirstName = reservation.driver.Name,
                    LastName = reservation.driver.Name,
                    Address = reservation.driver.address.Street,
                    City = reservation.driver.address.City,
                    PostCode = reservation.driver.address.ZipCode,
                    Country = reservation.driver.address.Country,
                    PhoneNumber = reservation.driver.Phone,
                    Remarks = SetRemarks(reservation.rental),
                    Address2 = "",
                    Address3 = "",
                    BirthDay = "",
                    Email = "",
                    FlightNo = "",
                    paymentType = "0",
                    BookStatus = 0,
                    ProductId = reservation.AgreementId.ToString(),
                    Title = "",
                    PickDropInfo = new NordCar.Carla.Data.Entities.EC.PickDropInfo()
                    {
                        PickUp = new NordCar.Carla.Data.Entities.EC.Trip() { LocationId = reservation.rental.StationOutId.ToString(), Date = reservation.rental.DateOut, Time = reservation.rental.TimeOut },
                        DropOff = new NordCar.Carla.Data.Entities.EC.Trip() { LocationId = "", Date = reservation.rental.DateIn, Time = reservation.rental.TimeIn }
                    },
                    Extra = null//new NordCar.Carla.Data.Entities.EC.SelectedExtras() { Insurance = null, Mileage = null, RecommendedExtras = null}
                };

                if (reservation.ECReservationNumer.Trim() != "")
                {
                    bs.OrgBookNr = reservation.ECReservationNumer;
                }

                var data = ecAPIManager.MakeReservation(bs, newRes);

                if (!data.Item1.Succes)
                {
                        throw new FaultException<ECConfigurationFault>(new ECConfigurationFault("MakeReservation"), data.Item1.ErrorMessage);
                }

                log.Info(string.Format("Reservationsnumber: {0}", data.Item2.ReservationNo));
                
            }
            catch (FaultException<ConfigurationFault> ex)
            {
                log.Warn(ex.Reason);
                throw new FaultException<ECConfigurationFault>(new ECConfigurationFault("Make_Reservation"), ex.Reason);
            }
            catch (FaultException ex)
            {
                if (!(ex is FaultException<ECValidationFault>))
                    log.Warn(ex.Reason);
                throw ex;
            }
            catch (System.Exception ex)
            {
                log.Error(ex.Message, ex);
                throw new FaultException(ex.Message);
            }

        }
      
        public IEnumerable<string> GetReservations()
        {
             return new List<string>() {"1","2"};
        }

        /// <summary>
        /// SetRemarks , return all as string.
        /// </summary>
        /// <param name="rental"></param>
        /// <returns></returns>
        private static string SetRemarks(Rental rental)
        {
            StringBuilder strb = new StringBuilder();
            strb.AppendLine(string.Format("EC-Info:{0}", rental.ECDepartmentInfo));
            strb.AppendLine(string.Format("SOS-Info:{0}", rental.SOSCustomerInfo));
            strb.AppendLine(string.Format("Vinterdæk:{0}", rental.WinterTires ? "Ja" : "Nej"));
            strb.AppendLine(string.Format("Automat-gear:{0}", rental.AutomaticGear ? "Ja" : "Nej" ));
            strb.AppendLine(string.Format("Træk:{0}", rental.Towbar ? "Ja" : "Nej"));
            strb.AppendLine(string.Format("Barnestol:{0}", rental.ChilSeat ? "Ja" : "Nej"));
            strb.AppendLine(string.Format("GPS:{0}", rental.GPS ? "Ja" : "Nej"));
            strb.AppendLine(string.Format("Ekstra chauffør:{0}", rental.ExtraDriver ? "Ja" : "Nej"));
            strb.AppendLine(string.Format("Depositum brændstof:{0}", rental.FuelDeposit ? "Ja" : "Nej"));
            strb.AppendLine(string.Format("Maks. GOP:{0}", rental.MaxGOP.ToString()));
          
            strb.AppendLine(string.Format("Afhentning:{0}", rental.Pickup ? "Ja" : "Nej"));
            if (rental.Pickup)
            {
                strb.AppendLine(string.Format("Gade:{0}", rental.PickupAdress.Street));
                strb.AppendLine(string.Format("By:{0}", rental.PickupAdress.City));
                strb.AppendLine(string.Format("Postnr:{0}", rental.PickupAdress.ZipCode));
            }
            
            strb.AppendLine(string.Format("Levering:{0}", rental.Delivery ? "Ja" : "Nej"));
            if (rental.Delivery)
            {
                strb.AppendLine(string.Format("Gade:{0}", rental.DeliveryAdress.Street));
                strb.AppendLine(string.Format("By:{0}", rental.DeliveryAdress.City));
                strb.AppendLine(string.Format("Postnr:{0}", rental.DeliveryAdress.ZipCode));
            }
            
            strb.AppendLine(string.Format("Bilmærke:{0}", rental.CarBrand));
            strb.AppendLine(string.Format("Model:{0}", rental.CarModel));


            return strb.ToString();
        }

        private static DateTime ServerBuildTime
        {
            get
            {
                if (_serverBuildTime == DateTime.MinValue)
                {
                    var assembly = Assembly.GetExecutingAssembly();
                    var fileInfo = new FileInfo(assembly.Location);
                    _serverBuildTime = fileInfo.LastWriteTime;
                }
                return _serverBuildTime;
            }
        }


       
        

        

        
    }
}
